name: Auto Merge

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
  pull_request:
    types:
      - labeled

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request') ||
      (github.event_name == 'pull_request' && github.event.action == 'labeled')

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Auto merge Dependabot PRs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get PR details
            let pr;
            if (context.eventName === 'workflow_run') {
              // Find PR from workflow run
              const pulls = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`
              });
              
              if (pulls.data.length === 0) {
                console.log('No PR found for this workflow run');
                return;
              }
              pr = pulls.data[0];
            } else {
              // Label event
              pr = context.payload.pull_request;
            }

            // Check if PR should be auto-merged
            const isDependabot = pr.user.login === 'dependabot[bot]';
            const hasAutoMergeLabel = pr.labels.some(label => label.name === 'auto-merge');

            if (!isDependabot && !hasAutoMergeLabel) {
              console.log('PR is not from Dependabot and does not have auto-merge label');
              return;
            }

            // Check all checks are passing
            const checkRuns = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });

            const allChecksPass = checkRuns.data.check_runs.every(
              check => check.status === 'completed' && check.conclusion === 'success'
            );

            if (!allChecksPass) {
              console.log('Not all checks are passing');
              return;
            }

            // Merge the PR
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: 'squash'
              });
              console.log(`Successfully merged PR #${pr.number}`);
            } catch (error) {
              console.error(`Failed to merge PR #${pr.number}:`, error);
            }
